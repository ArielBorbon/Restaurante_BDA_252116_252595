/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ModuloIngredientes;

import BO.IngredienteBO.IngredienteBO;
import Entidades.Ingredientes.Ingrediente;
import Fabricas.FabricaIngredientes;
import NegocioException.NegocioException;
import java.awt.Color;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Tabla de ingredients
 *
 * @author Ariel Eduardo Borbon Izaguirre 252116
 * @author Alberto Jimenez Garcia 252595
 */
public class FormIngredientesTabla extends javax.swing.JPanel {

    /**
     * Creates new form FomIngredientesTabla
     *
     * @throws NegocioException.NegocioException
     */
    public FormIngredientesTabla() throws NegocioException {
        initComponents();
        cargarIngredientesEnTabla();
    }

    /**
     * Este método se encarga de cargar la lista de ingredientes en una tabla,
     * mostrando su nombre, unidad de medida y stock disponible.
     *
     * 1. **Método**: `cargarIngredientesEnTabla()` 2. **Tipo de retorno**:
     * `void` 3. **Excepciones**: - Lanza `NegocioException` si ocurre un error
     * al obtener la lista de ingredientes.
     *
     * 4. **Funcionalidad**: - Se crea una instancia de `IngredienteBO`
     * utilizando la fábrica `FabricaIngredientes`. - Se define un arreglo de
     * `String` llamado `columnas`, que contiene los nombres de las columnas que
     * se mostrarán en la tabla: "Nombre", "Unidad de Medida" y "Stock". - Se
     * crea un modelo de tabla (`DefaultTableModel`) utilizando las columnas
     * definidas, inicializándolo con 0 filas. Se sobrescribe el método
     * `isCellEditable` para hacer que las celdas de la tabla no sean editables.
     * - Se obtiene la lista de ingredientes llamando al método
     * `obtenerListaIngredientesBO` del objeto `ingredienteBO`. - Se itera sobre
     * cada ingrediente en la lista: - Se crea un arreglo de objetos
     * (`Object[]`) que representa una fila de la tabla con los datos del
     * ingrediente (nombre, unidad de medida y stock). - Se agrega la fila al
     * modelo de la tabla. - Finalmente, se establece el modelo de la tabla
     * (`tblIngredientes`) con el modelo creado, actualizando así la
     * visualización de los ingredientes.
     *
     * Este método es esencial para presentar de manera clara y organizada la
     * información de los ingredientes en la interfaz de usuario, facilitando la
     * consulta de datos sobre los ingredientes disponibles.
     *
     * @throws NegocioException
     */
    private void cargarIngredientesEnTabla() throws NegocioException {

        IngredienteBO ingredienteBO = FabricaIngredientes.crearIngredienteBO();
        String[] columnas = {"Nombre", "Unidad de Medida", "Stock"};
        DefaultTableModel modeloTabla = new DefaultTableModel(columnas, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        List<Ingrediente> ingredientes = ingredienteBO.obtenerListaIngredientesBO();

        for (Ingrediente ing : ingredientes) {
            Object[] fila = {
                ing.getNombre(),
                ing.getUnidad_medida(),
                ing.getStock()
            };
            modeloTabla.addRow(fila);
        }

        tblIngredientes.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();

        tblIngredientes.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Unidad De Medida", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblIngredientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblIngredientes);
        if (tblIngredientes.getColumnModel().getColumnCount() > 0) {
            tblIngredientes.getColumnModel().getColumn(0).setResizable(false);
            tblIngredientes.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblIngredientes.getColumnModel().getColumn(1).setResizable(false);
            tblIngredientes.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblIngredientes.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    public JTable getTablaIngredientes() {
        return tblIngredientes;
    }

    /**
     * Este método se encarga de recargar la tabla de ingredientes, actualizando
     * su contenido con la información más reciente.1.
     *
     * **Método**: `recargarTabla()` 2. **Tipo de retorno**: `void` 3.
     * *Excepciones**: - Lanza `NegocioException` si ocurre un error al cargar
     * los ingredientes.
     *
     * 4. **Funcionalidad**: - Llama al método `cargarIngredientesEnTabla()`,
     * que se encarga de obtener la lista actualizada de ingredientes y llenar
     * la tabla correspondiente con esta información.
     *
     * Este método es esencial para asegurar que la tabla de ingredientes
     * muestre siempre la información más reciente, permitiendo a los usuarios
     * ver los datos actualizados sin necesidad de reiniciar la aplicación o la
     * ventana.
     *
     * @throws NegocioException.NegocioException
     */
    public void recargarTabla() throws NegocioException {
        cargarIngredientesEnTabla();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblIngredientes;
    // End of variables declaration//GEN-END:variables
}
